function [prms] = globalParams_final
% Parameter function, final manuscript version.

% ANALYSIS PARAMETERS:
% global params for analysis
prms.area          = 1;  % 1=sub data, 2=moser mEC data
prms.cellType      = 'BVC';  %  'BVC'; 'BC'
if 1
    prms.ageBins       = [16 18; 19 21; 22 25; 40 40]; %       %   default: 
else
    prms.ageBins       = [16 18; 19 21; 22 24; 25 27; 28 30; 31 33; 34 36; 40 40];  % Moser data age bins
end


% Convert ageBins to nice labels for graphs %
prms.ageLabels = cell(1,size(prms.ageBins,1));
for ii=1:size(prms.ageBins,1)  
    if prms.ageBins(ii,1)==40;                      prms.ageLabels{ii} = 'Adult';
    elseif prms.ageBins(ii,1)==prms.ageBins(ii,2);  prms.ageLabels{ii} = ['P', num2str(prms.ageBins(ii,1))];
    else;                                           prms.ageLabels{ii} = ['P', num2str(prms.ageBins(ii,1)), '-' num2str(prms.ageBins(ii,2))];
    end
end


%%% Cell type classification. 
% General params:
prms.classify.BVC.ageBins               = prms.ageBins; % copy over
prms.classify.BVC.thrTrials             = 1:2;    % Trials whose actual real data scores are used to define BVCs
prms.classify.BVC.thrTrialsShuf         = 1:2;    % Trials from which shuffled data is taken
prms.classify.BVC.thrTrialAv            = 'max'; % 'sortFirst';   'mean'; % 'max';'min;   % How to get an average test value when more than one trial is specified in 'prms.thrTrials'. % default: 'max' (also not important when using 1 trial only for def)
prms.classify.BVC.useOnly2TrBsl         = 0;
prms.classify.BVC.meanRateThr           = 0.2;                     % default: 0.2 (Bjerknes paper)
prms.classify.BVC.nBinVisThr            = 0.8 .* [625 784 804];    % N bins visited - for square, moser square, and circle.
prms.classify.BVC.minSpkWidth           = 0.3; % in ms - waveforms have to be wider than this (peak-to-trough)
prms.classify.BVC.excPCFits             = 0; % Exclude data significantly and better fit by BVCs. Needs 'isPC' and 'PCRespMax' fields already in table, these are generated by 'analyseBVCvsPCFits.m'
% Border cell specific:
prms.classify.BC                   = prms.classify.BVC;   % Copy over to get copy of general params
prms.classify.BC.thrByMap          = [0 0];
prms.classify.BC.thrScore          = {'borderScore','SI'}; % default: {'borderScoreAdSm_New','SI'} (Bjerknes paper)
prms.classify.BC.thrPrc            = [95 95]; % default: 95 (Bjerknes paper)
prms.classify.BC.loadBCsFromXCL    = 0;
% Spatially modulated, in general:
prms.classify.spat                 = prms.classify.BVC;   % Copy over to get copy of general params
prms.classify.spat.thrScore        = {'SI'};  %
prms.classify.spat.thrPrc          = 75;   
prms.classify.spat.thrByMap        = 0;
% BVC specific:
prms.classify.BVC.thrByMap             = [0 0 1];                                 % If 1, thresholds calculated and BVCs defined for individual maps. Need to specify separately for each measure in 'thrScore'
prms.classify.BVC.thrScore             = {'BVCRespMax','SI','BVCRespMax'};        %   
prms.classify.BVC.thrPrc               = [99 75 99];                              %
prms.classify.BVC.excPCFits            = 0; %  If this is used, is used exclusively for defining BVCs
prms.classify.BVC.fixedThrs            = [];


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Plotting/analysis parameters for specific final figures:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Figure 2 cell properties
prms.fig2props.cellType                = prms.cellType; % copy over
prms.fig2props.ageBins                 = prms.ageBins; % copy over
prms.fig2props.bslTrToPlot             = 1:2;
prms.fig2props.plotOnlyIsBVCTrials     = 1;
prms.fig2props.splitVar                = ''; % 'dMax';   %   'env'    % 'area'  'cellType' % How to split data for >1 line per plot. 'env'=split by bsl/barr/CCE, 'cellType'=if plotting BVCs, those cells that are also BC, or vice versa.
prms.fig2props.splitThr                = [];
prms.fig2props.nEnvToPlot              = 1;  % 1=baseline only, 2=bsl + barrier, 3=basl+barrier+CCE. Only effective if prms.splitVar='env', otherwise always just plot baselines.
prms.fig2props.subSampMode             = []; % 'wfPkDiff';  % []; %
prms.fig2props.subSampThrs             = [4.5, 5.5, 6, 7];
prms.fig2props.measuresToPlot          = {'SI','BVCRespMax','interStab','intraStab'};      
prms.fig2props.yLimMax                 = {[0 0.62],  [0.6 1],     [-0.2 1],      [-0.2  1]     }; %      [0.5 1.0], [-pi/4 pi/4], [0 5]};%,  [0.3 .9],     [0.3 .9],      [0 5],      [0 1]};%[0 4],  [0 0.25*pi] , [0 0.2]          1,             0.8      , [],            [],             []}; % {[0 0.9],   [0.3 .9],     [0.3 .9],      [0 5],      [0 1],     [0 4],  [0 0.25*pi] , [0.2 0.8]}
prms.fig2props.yLabels                 = {{'Spatial Information',' (bits/spike)'},'BVC Fit (r_m_a_x)','Inter-trial stability (r)','Intra-trial stability (r)'};

% Figure 3 histograms written just for MS
prms.fig3.ageBins         = [16 25; 40 40]; % prms.ageBins;
prms.fig3.area            = prms.area;
prms.fig3.ageLabels       = prms.ageLabels;
prms.fig3.cellType        = 'isBVC';
prms.fig3.bslTrToPlot     = 1:2;
prms.fig3.dSplit          = [1 14]; %  [1 5; 6 13]; %   
prms.fig3.phiHistQuadAvs  = 0;
prms.fig3.measuresToPlot  = {  'dMax',       'SZMaxInd',                                 'phiMax' }; 
prms.fig3.xLabels         = { '{\itd} (cm)', [char(963) '_0 (Half-height width, cm)' ],  [char(981) ' (' char(176) ')']  };
prms.fig3.yLabels         = prms.fig3.xLabels(1:2);
prms.fig3.yLabels{3}      = ['% Wall oriented ' char(981)];
prms.fig3.plotSZ_HHW      = 1; % Plot SZ levels as the half-height width of their gaussians (for d=0, phi=0 tuning). Alterative is level as index (1:4)

% Figure 4 - phi tunings in the CCE
prms.fig4.ageLabels         = prms.ageLabels;   %   {'P16-25', 'Adult'}; %    
prms.fig4.ageBins           = prms.ageBins;     % [16 25; 40 40];  % 
prms.fig4.measuresToPlot    = {'phiMax'};
prms.fig4.xLabels           = {[char(981) ' (' char(176) ')']};
prms.fig4.phiHistQuadAvs    = 0;
% These parameters used to exclude poorly tuned BVCs from circle data, to test results when SQ and Ci BVC score equalised (figure S7)
prms.fig4.exclBadCCEBVCs    = 0;
prms.fig4.exclBadCCEBVCThrs = [0.64 0.70 0.70 0.70];
% These parameters only used for ensemble analyses
prms.fig4.minNCells         = 5;
prms.fig4.BVCDefTrial       = 'bsl';
prms.fig4.exclLongDBVCsThr  = 10;
prms.fig4.corrEnsRots       = 1;
prms.fig4.ageBinForEns      = [16 25; 40 40]; % Separate, for binning ensemble based results.
prms.fig4.ageLabelsEns      = {'P16-25', 'Adult'};


% Figure 5 - Barrier analysis and plots
prms.barrAnalysis.ageBins            = prms.ageBins;
prms.barrAnalysis.bslTrial           = 2; % Which baseline trial to use classify the tuning of the BVC/bordC?
prms.barrAnalysis.useOnlyIsBVCTrials = 1; % if true prms.barrAnalysis.bslTrial has to also pass BVC select criterion  
prms.barrAnalysis.measuresToPlot     = {'barrScoreAbs', 'barrScoreNorm'};   % 'barrScoreAbs'; 'barrScoreNorm'      {'dMax', 'phiMax', 'barrScoreAbs' }
prms.barrAnalysis.yLim               = {[-3 4],        [-0.4 0.5]    };   %  
prms.barrAnalysis.yLabelsMS          = {'Rate Change (Hz)', 'Norm Rate Change (a.u.)'};
prms.barrAnalysis.groupsToPlot       = [1]; % Which groups (based on BVC, BordC classifiaction). 1: BVC, 2:BC, 3:BVC&BC, 4:BVC&~BC, 5: ~BVC&BC

prms.barrAnalysis.filtLongDThr       = 5;  % EXCLUDE BVCs with a distance tuning *greater than or equal to* than this. leave empty for no filtering
prms.barrAnalysis.filtHighSZ         = [  ];  % [f1 f2]; FILTER BVCs so as to use only SZ level >= f1 & <=f2


% BVC vs BC comparisons.
prms.BVCvsBC.area                    = 2;   % Set to mEC
prms.BVCvsBC.ageBins                 = [16 18; 19 21; 22 24; 25 27; 28 30; 31 33; 34 36; 40 40];  % Moser data age bins
prms.BVCvsBC.cellTypeList            = {'isBVC','isBC'};
prms.BVCvsBC.bslTrToPlot             = 1:2;
prms.BVCvsBC.plotOnlyIsBVCTrials     = 1;

%%% FINISH PARAMETER LIST %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


[prms.fig2props.ageLabels,prms.barrAnalysis.ageLabels ] = deal(prms.ageLabels);